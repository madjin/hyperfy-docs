"use strict";(self.webpackChunkhyperfy_docs=self.webpackChunkhyperfy_docs||[]).push([[76],{1414:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=n(4848),o=n(8453);const r={},d="<spawn>",i={id:"developers/components/spawn",title:"<spawn>",description:"Defines a point at which avatars should join when they enter a world. If multiple spawn points exist one will be chosen randomly.",source:"@site/docs/developers/components/spawn.md",sourceDirName:"developers/components",slug:"/developers/components/spawn",permalink:"/hyperfy-docs/docs/developers/components/spawn",draft:!1,unlisted:!1,editUrl:"https://github.com/madjin/hyperfy-docs/tree/main/docs/developers/components/spawn.md",tags:[],version:"current",lastUpdatedBy:"Ash",lastUpdatedAt:1696253992,formattedLastUpdatedAt:"Oct 2, 2023",frontMatter:{},sidebar:"developers",previous:{title:"<skysphere>",permalink:"/hyperfy-docs/docs/developers/components/skysphere"},next:{title:"<sphere>",permalink:"/hyperfy-docs/docs/developers/components/sphere"}},a={},c=[{value:"Props",id:"props",level:2},{value:"Notes",id:"notes",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"spawn",children:(0,s.jsx)(t.code,{children:"<spawn>"})}),"\n",(0,s.jsx)(t.p,{children:"Defines a point at which avatars should join when they enter a world. If multiple spawn points exist one will be chosen randomly."}),"\n",(0,s.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Prop"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"position"}),(0,s.jsx)(t.td,{children:"Array"}),(0,s.jsx)(t.td,{children:"Position of the spawn point."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"[0,0,0]"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"rotation"}),(0,s.jsx)(t.td,{children:"Array"}),(0,s.jsx)(t.td,{children:"Rotation of the spawn point."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"[0,0,0]"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"You can add and remove these dynamically to control where people spawn. For example you might have spawn points in a lobby before a game starts, and then move them to the spectator area when the game starts, so that new people joining can observe."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function d(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);